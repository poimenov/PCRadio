// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PCRadio.DataAccess;

#nullable disable

namespace PCRadio.DataAccess.Migrations
{
    [DbContext(typeof(Database))]
    [Migration("20251015123414_AddedHistory")]
    partial class AddedHistory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("PCRadio.DataAccess.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CountryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("PCRadio.DataAccess.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("PCRadio.DataAccess.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("PCRadio.DataAccess.Models.HistoryRecord", b =>
                {
                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("TrackName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("StartTime");

                    b.ToTable("HistoryRecords");
                });

            modelBuilder.Entity("PCRadio.DataAccess.Models.Station", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CountryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly?>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Recomended")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Stream")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<int>("UId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Stations");
                });

            modelBuilder.Entity("PCRadio.DataAccess.Models.StationCity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("StationId");

                    b.ToTable("StationCities");
                });

            modelBuilder.Entity("PCRadio.DataAccess.Models.StationGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("GenreId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("StationId");

                    b.ToTable("StationGenres");
                });

            modelBuilder.Entity("PCRadio.DataAccess.Models.StationSubGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("StationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubGenreId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StationId");

                    b.HasIndex("SubGenreId");

                    b.ToTable("StationSubGenres");
                });

            modelBuilder.Entity("PCRadio.DataAccess.Models.SubGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("GenreId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("SubGenres");
                });

            modelBuilder.Entity("PCRadio.DataAccess.Models.City", b =>
                {
                    b.HasOne("PCRadio.DataAccess.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("PCRadio.DataAccess.Models.Station", b =>
                {
                    b.HasOne("PCRadio.DataAccess.Models.Country", "Country")
                        .WithMany("Stations")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("PCRadio.DataAccess.Models.StationCity", b =>
                {
                    b.HasOne("PCRadio.DataAccess.Models.City", "City")
                        .WithMany("StationCities")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCRadio.DataAccess.Models.Station", "Station")
                        .WithMany("StationCities")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("PCRadio.DataAccess.Models.StationGenre", b =>
                {
                    b.HasOne("PCRadio.DataAccess.Models.Genre", "Genre")
                        .WithMany("StationGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCRadio.DataAccess.Models.Station", "Station")
                        .WithMany("StationGenres")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("PCRadio.DataAccess.Models.StationSubGenre", b =>
                {
                    b.HasOne("PCRadio.DataAccess.Models.Station", "Station")
                        .WithMany("StationSubGenres")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCRadio.DataAccess.Models.SubGenre", "SubGenre")
                        .WithMany("StationSubGenres")
                        .HasForeignKey("SubGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Station");

                    b.Navigation("SubGenre");
                });

            modelBuilder.Entity("PCRadio.DataAccess.Models.SubGenre", b =>
                {
                    b.HasOne("PCRadio.DataAccess.Models.Genre", "Genre")
                        .WithMany("SubGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("PCRadio.DataAccess.Models.City", b =>
                {
                    b.Navigation("StationCities");
                });

            modelBuilder.Entity("PCRadio.DataAccess.Models.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Stations");
                });

            modelBuilder.Entity("PCRadio.DataAccess.Models.Genre", b =>
                {
                    b.Navigation("StationGenres");

                    b.Navigation("SubGenres");
                });

            modelBuilder.Entity("PCRadio.DataAccess.Models.Station", b =>
                {
                    b.Navigation("StationCities");

                    b.Navigation("StationGenres");

                    b.Navigation("StationSubGenres");
                });

            modelBuilder.Entity("PCRadio.DataAccess.Models.SubGenre", b =>
                {
                    b.Navigation("StationSubGenres");
                });
#pragma warning restore 612, 618
        }
    }
}
