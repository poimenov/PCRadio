@using Microsoft.Extensions.Localization
@using PCRadio.DataAccess.Models
@using System.Diagnostics
@using PCRadio.Extensions
@using _regular = Microsoft.FluentUI.AspNetCore.Components.Icons.Regular
@using _filled = Microsoft.FluentUI.AspNetCore.Components.Icons.Filled
@implements IDisposable
@inject IStringLocalizer<StationsList> localizer
@inject IJSRuntime JSRuntime

@if (SelectedStation != null)
{
    <PCRadio.Components.Controls.Player Station="@SelectedStation" OnStationChanged="@OnStationChanged" />
}

@if (Stations == null || !Stations.Any())
{
    <div class="empty-message">@localizer["NoStations"]</div>
}
else
{
    <FluentListbox Items="@Stations" @bind-SelectedOption="@SelectedStation" OptionValue="@(x=>x?.Id.ToString())"
    Class="station-list">
    <OptionTemplate>
        <FluentCard Class="station-card">
            <img class="logo" src="@context?.Logo" alt="@context?.Name" loading="lazy" />
                <div style="width: 180px !important;">
                    <div style="font-weight: bold; height: 20px !important;overflow: hidden;">
                        @context?.GetCountryIcon() @context?.Name
                    </div>
                    <div style="height: 60px !important;overflow: hidden;">
            @if (context != null)
                {
                    if (context.IsFavorite)
                    {
                        <FluentIcon Value="@(new _filled.Size16.Heart())" Color="Color.Accent" Class="favorite-icon" />
                    }
                    else
                    {
                        <FluentIcon Value="@(new _regular.Size16.Heart())" Color="Color.Accent" Class="favorite-icon" />
                    }
                }                        
                        @context?.Description
                    </div>
                </div>
            </FluentCard>
        </OptionTemplate>
    </FluentListbox>
    <script>
        var isScollToEnd = false;
        function addScrollListener(stationListObjectReference) {
            var stationList = document.querySelector(".station-list");
            if (stationList !== null && stationList.parentElement !== null) {
                scrollContainer = stationList.parentElement;
                scrollContainer.addEventListener("scroll", (event) => {
                    if(scrollContainer.scrollHeight - scrollContainer.scrollTop === scrollContainer.clientHeight && !isScollToEnd) {
                        isScollToEnd = true;
                        console.log("Reached the bottom of the scroll container.");
                        stationListObjectReference.invokeMethodAsync("GetNext")
                            .then(() => {
                                isScollToEnd = false;
                            })
                            .catch(error => {
                                console.error("Error invoking GetNext:", error);
                            });
                    }
                });  
            }
        }      
    </script>
}
@code {
    [Parameter]
    public int PageSize { get; set; }
    [Parameter]
    public int Count { get; set; }
    [Parameter]
    public List<Station>? Stations { get; set; }
    [Parameter]
    public Func<int, int, IEnumerable<Station>> GetStations { get; set; } = default!;
    
    public void Dispose() => stationListObjectReference?.Dispose();

    private Station? SelectedStation { get; set; }
    private DotNetObjectReference<StationsList>? stationListObjectReference;

    private bool GetNextEnabled => Stations?.Count < Count;

    protected override void OnParametersSet()
    {
        SelectedStation = null;
    }
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            stationListObjectReference = DotNetObjectReference.Create(this);
            JSRuntime.InvokeVoidAsync("addScrollListener", stationListObjectReference);
        }
    }

    [JSInvokable]
    public void GetNext()
    {
        if (GetNextEnabled)
        {
            Stations!.AddRange(GetStations(Stations.Count, PageSize).ToList());
            this.StateHasChanged();
        }
    }

    private void OnStationChanged(Station station)
    {
        SelectedStation = station;
    }
}