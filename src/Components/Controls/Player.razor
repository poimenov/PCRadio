@using Microsoft.FluentUI.AspNetCore.Components
@using Microsoft.Extensions.Localization
@using Microsoft.Extensions.Options
@using PCRadio.DataAccess.Interfaces
@using _regular = Microsoft.FluentUI.AspNetCore.Components.Icons.Regular
@using _filled = Microsoft.FluentUI.AspNetCore.Components.Icons.Filled
@using PCRadio.DataAccess.Models
@using PCRadio.Extensions
@using PCRadio.Services.Interfaces
@inject IJSRuntime JSRuntime
@inject IOptions<AppSettings> options
@inject IStations stations
@inject ILinkOpeningService linkOpeningService
@inject IStringLocalizer<Player> localizer

<FluentStack Orientation="Orientation.Horizontal" Class="player">
    <img class="logo" src="@Station?.Logo" alt="@Station?.Name" loading="lazy" />
    <div style="min-width: 462px;">
        <div style="font-weight: bold;">@Station?.GetCountryIcon() @Station?.Name <span
                style="font-weight: normal;">(@_country @_cities)</span> </div>
        <div style="font-style: italic;">@_genres @_subgenres</div>
        <div title="@Station?.Description" style="font-size: 12px;height:36px;overflow: hidden;">
            @Station?.Description
        </div>
        <marquee id="NowPlaying" direction="left" behavior="scroll" scrollamount="2"
            style="color:var(--accent-fill-rest);font-size: 12px;@(string.IsNullOrEmpty(_searchText) ? "display: none;" : "")">
        </marquee>
    </div>
    <FluentSpacer />
    <div style="margin-left:2px;">
        <div>
            <FluentButton Id="popoverButton" IconStart="@(new _regular.Size24.Speaker2())" Color="Color.Accent"
                OnClick="@(() => _isPopoverVisible = !_isPopoverVisible)" Title="@localizer["Volume"]" />
        </div>
        <div>
            <input type="hidden" id="searchText" @bind:event="oninput" @bind:get="_searchText" @bind:set="OnInput" />
            <FluentButton IconStart="@(new _regular.Size24.VideoClip())" Color="Color.Accent" OnClick="@Search"
                Disabled="@(string.IsNullOrEmpty(_searchText))" Title="@localizer["SearchInYoutube"]" />
        </div>
    </div>

    <div style="margin-left:2px;margin-right: 20px;">
        <div>
            <FluentButton IconStart="@(_isPlaying ? new _regular.Size24.Pause() : new _regular.Size24.Play())"
                Color="Color.Accent" OnClick="@Play" Title="@localizer["PlayStop"]" />
        </div>
        <div>
            <FluentButton IconStart="@(Station!.IsFavorite ? new _filled.Size24.Heart() : new _regular.Size24.Heart())"
                Color="Color.Accent" OnClick="@ToggleFavorite" Title="@localizer["AddToFavorites"]" />
        </div>
    </div>
</FluentStack>
<FluentPopover AnchorId="popoverButton" @bind-Open="_isPopoverVisible" Style="width: 90px; height: 260px;"
    VerticalPosition="VerticalPosition.Top" HorizontalPosition="HorizontalPosition.Left">

    <Body>
        <FluentSlider Orientation="Orientation.Vertical" Min="0.0" Max="1.0" Step="0.1" ValueChanged="@SetVolume"
            Value="@_volume" TValue="double" Style="width: 30px; height: 200px;">
            <FluentSliderLabel Position="0.0">0%</FluentSliderLabel>
            <FluentSliderLabel Position="0.25">25%</FluentSliderLabel>
            <FluentSliderLabel Position="0.5">50%</FluentSliderLabel>
            <FluentSliderLabel Position="0.75">75%</FluentSliderLabel>
            <FluentSliderLabel Position="100">100%</FluentSliderLabel>
        </FluentSlider>
    </Body>
</FluentPopover>
<audio id="audio" src="@($"{Station?.Stream}-{options.Value.GetQuality()}")" controls style="display: none;" />
<script>
    var intervalId;

    function getJson(url, callback) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'json';
        xhr.onload = function () {
            var status = xhr.status;
            if (status === 200) {
                callback(null, xhr.response);
            } else {
                callback(status, xhr.response);
            }
        };
        xhr.send();
    }

    function setSearchText(value) {
        var searchText = document.getElementById("searchText");
        if (searchText.value != value) {
            searchText.value = value;
            searchText.dispatchEvent(new Event('input', { bubbles: true }));
        }
    }

    function setMarquee(value) {
        var marquee = document.getElementById("NowPlaying");
        if (marquee.innerHTML != value) {
            marquee.innerHTML = value;
        }
    }

    function getMetadata(name) {
        getJson("https://meta.pcradio.ru/" + name + "_current.json", function (err, data) {
            if (err !== null) {
                console.log('Something went wrong: ' + err);
            } else {
                var newText = data.artist + " - " + data.title;
                setMarquee(newText);
                setSearchText(newText);
            }
        });
    }

    function playAudio(isPlaying) {
        var player = document.getElementById("audio");
        clearInterval(intervalId);
        intervalId = null;
        setMarquee("");
        setSearchText("");
        if (isPlaying) {
            player.play();
            var name = player.src.split("/")[3];
            name = name.substring(0, name.indexOf("-"));
            intervalId = setInterval(getMetadata, 5000, name);
        } else {
            player.pause();
        }
    }

    function setVolume(volume) {
        var player = document.getElementById("audio");
        player.volume = volume;
    }
</script>

@code {
    [Parameter]
    public int? StationId { get; set; }

    private bool _isPlaying;
    private string? _country;
    private string? _cities;
    private string? _genres;
    private string? _subgenres;
    private string? _searchText = string.Empty;
    private double _volume = 1.0;
    private bool _isPopoverVisible;
    private Station? Station { get; set; }

    protected override void OnParametersSet()
    {
        if (StationId.HasValue && Station?.Id != StationId.Value)
        {
            _isPlaying = false;
            _searchText = string.Empty;
            Station = stations.GetStation(StationId.Value);
            _country = Station?.Country?.Name;
            _cities = string.Join(", ", Station?.StationCities?.Select(x => x.City?.Name)
            .Where(x => !string.IsNullOrEmpty(x)) ?? Array.Empty<string>());
            _genres = string.Join(", ", Station?.StationGenres?.Select(x => x.Genre?.Name)
            .Where(x => !string.IsNullOrEmpty(x)) ?? Array.Empty<string>());
            _subgenres = string.Join(", ", Station?.StationSubGenres?.Select(x => x.SubGenre?.Name)
            .Where(x => !string.IsNullOrEmpty(x)) ?? Array.Empty<string>());
        }
    }

    private async Task Play()
    {
        _isPlaying = !_isPlaying;
        await JSRuntime.InvokeVoidAsync("playAudio", _isPlaying);
    }

    private async Task SetVolume(double volume)
    {
        _volume = volume;
        await JSRuntime.InvokeVoidAsync("setVolume", volume);
    }

    private void ToggleFavorite()
    {
        if (Station != null)
        {
            Station.IsFavorite = !Station.IsFavorite;
            stations.SetFavorite(Station.Id, Station.IsFavorite);
        }
    }

    private void OnInput(string? value)
    {
        if (_isPlaying)
        {
            _searchText = value;
        }
    }

    private void Search()
    {
        if (!string.IsNullOrWhiteSpace(_searchText))
        {
            linkOpeningService.OpenUrl("https://www.youtube.com/results?search_query=" +
            System.Web.HttpUtility.UrlEncode(_searchText));
        }

    }
}