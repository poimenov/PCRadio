@using Microsoft.Extensions.Options
@using PCRadio.DataAccess.Interfaces
@using regular = Microsoft.FluentUI.AspNetCore.Components.Icons.Regular
@using filled = Microsoft.FluentUI.AspNetCore.Components.Icons.Filled
@using PCRadio.DataAccess.Models
@using PCRadio.Extensions
@inject IJSRuntime JSRuntime
@inject IOptions<AppSettings> options
@inject IStations stations

<div class="player">
    <img class="logo" src="@Station?.Logo" alt="@Station?.Name" loading="lazy" />
    <div>
        <div style="font-weight: bold;">@Station?.Name</div>
        <div title="@Station?.Description">
            @Station?.Description
        </div>
    </div>
    <div style="margin-right: 24px;vertical-align: middle;">
        <div>
            <FluentButton IconStart="@(_isPlaying?new regular.Size24.Pause():new regular.Size24.Play())"
                Color="Color.Accent" OnClick="@Play" />
        </div>
        <div>
            <FluentButton IconStart="@(_station!.IsFavorite ? new filled.Size24.Heart() : new regular.Size24.Heart())"
                Color="Color.Accent" OnClick="@ToggleFavorite" />
        </div>
    </div>

    <audio id="audio" src="@($"{Station?.Stream}-{options.Value.GetQuality()}")" controls style="display: none;" />
    <script>
        function playAudio(isPlaying) {
            var player = document.getElementById("audio");
            if (isPlaying) {
                player.play();
            } else {
                player.pause();
            }
        }
    </script>
</div>

@code {
    private Station? _station = default!;
    private bool _isPlaying { get; set; }

    [Parameter]
    public Station? Station
    {
        get => _station;
        set
        {
            _station = value;
            _isPlaying = false;
            JSRuntime.InvokeVoidAsync("playAudio", false);
        }
    }

    [Parameter]
    public EventCallback<Station> OnStationChanged { get; set; }

    private async void Play()
    {
        _isPlaying = !_isPlaying;
        await JSRuntime.InvokeVoidAsync("playAudio", _isPlaying);
    }

    private async void ToggleFavorite()
    {
        _station!.IsFavorite = !_station!.IsFavorite;
        stations.SetFavorite(_station.Id, _station.IsFavorite);
        await OnStationChanged.InvokeAsync(_station);
    }
}
